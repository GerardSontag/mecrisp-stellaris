\ ymodem
\ **************
\ xmodem block org proto
\  +---+-----+------+-----------------+----+
\  |SOH|BLKNR|#BLKNR|DATA1 ... DATA128|CSUM|  
\  +---+-----+------+-----------------+----+
\  SOH - start of head <$01>
\  BLKNR - Blocknumber starts at <$01> wraps at <$FF> to <$00> not to 1
\  #BLKNR - <$FF - BLKNR>
\
\    /* update CRC */
\    unsigned short
\    updcrc(c, crc)
\    register c;
\    register unsigned crc;
\    {
\            register count;
\
\            for (count=8; --count>=0;) {
\                    if (crc & 0x8000) {
\                            crc <<= 1;
\                            crc += (((c<<=1) & 0400)  !=  0);
\                            crc ^= 0x1021;
\                    }
\                    else {
\                            crc <<= 1;
\                            crc += (((c<<=1) & 0400)  !=  0);
\                    }
\            }
\            return crc;
\    }
\
\

$01 constant <SOH> \ start of 128 byte block
$02 constant <STX> \ start of 1024 byte block
$04 constant <EOT>
$06 constant <ACK>
$15 constant <NAK> 
$18 constant <CAN>
$43 constant <C>

\ crc calculation functions
decimal
: crc1 ( crc c -- crc ) \ update the xmodem crc looped version
  \ ." crc1< " .s
  8 lshift   ( crc  c<<8 )
  xor        ( crc' )
  8 0 do
    2*  dup $10000 and ( crc' f )
    if  $1021 xor      ( crc' )
    then
  loop
  $ffff and
  \ ." crc1> " .s
  ;

decimal
: crc2 ( crc c -- crc )     \ update xmodem crc 
   \ ." crc2< " .s
   swap dup                  ( c crc crc )
   $8 rshift swap $8 lshift OR ( c crc )
   XOR                       ( crc )
   dup $ff and 4 rshift xor
   dup $0c lshift xor
   dup $ff and 5 lshift xor
   $ffff and 
   \ ." crc2> " .s
   ;


decimal
: test-crc
  $10000 0 do
    i 1023 and
	0= if
       ." Run " i . cr
    then    
    i test-crc-data
  loop 
;

$E5CC constant CRC_TEST_RESULT
$FFFF constant CRC_TEST_START
: test-crc-0x1021
	s" 123456789" ( cadr len -- )
;

: perform-crc-test ( fkt-adr -- f )
	CRC_TEST_START  ( f -- f crc ) 
	test-crc-0x1021 ( f crc -- f crc cstring len ) .s
	over + swap     ( f crc cend cstart ) .s
	do              ( f crc )
		i c@        ( f crc c )
		2 pick      ( f crc c f ) .s
		execute     ( f crc )
	loop
	swap drop       ( crc ) .s
	CRC_TEST_RESULT = dup
	if   ." Test ok " cr
	else ." Test failed " cr
	then
;

: test-crc1 
  ['] crc1 perform-crc-test
  drop ;

: test-crc2
  ['] crc2 perform-crc-test
  drop ;

: update-csum ( c csum -- csum ) \ 8 bit checksum
  + $ff and
  ;  