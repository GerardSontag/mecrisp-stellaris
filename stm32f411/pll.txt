\ file: PLL.TXT
\ 2016-05-20jjo
\ collects functions for reprogramming PLL

\ datasheet stm32f411 "E:\stm\DM00115249 STM32F411xC STM32F411xE.pdf"
\ "C:\Users\jeanjo\Downloads\stm\DM00115249 stm32f411re data sheet.pdf"
\ "C:\Users\jeanjo\Downloads\stm\DM00119316 stm32f411re reference manual.pdf"
\ progman "E:\stm\DM00046982 PM0214 STM32F3 and STM32F4 Series Cortex-M4 programming manual.pdf"
\ ref man "E:\stm\DM00119316  RM0383 STM32F411xC_E advanced ARM-based 32-bit MCUs .pdf"

\ Requires bits! bits@ from util.txt

include util.txt

#8000000 constant HSE_CLK                \ 8 MHz system HSE clock on Nucleo



\ ***** stm32f411re clock tree
\ RTCCLK <- (RTC enable & RTCSEL)
\ RTCSEL <- (OFF[0]|LSE[1]|LSI[2]|HSE_RTC[3])
\ HSE_RTC <- HSE/RTCPRE[2-31;0,1-clock off]
\
\ ***** flash control register
$40023C00 constant Flash_ACR             \ Flash Access Control Register 
: dcache-ena? ( -- f )                   \ is dcache enabled
   1 #10 lshift FLASH_ACR bit@ ;
: dcache-ena  ( -- )                     \ enable dcache
   1 #10 lshift FLASH_ACR bis! ;
: dcache-dis  ( -- )                     \ disable dcache
   1 #10 lshift FLASH_ACR bic! ;
: dcache-reset ( -- )                    \ reset dcache
   dcache-ena? dcache-dis
   1 #12 lshift FLASH_ACR bis!
   1 #12 lshift FLASH_ACR bic!
   if dcache-ena then ;
: icache-ena? ( -- f )                   \ instruction cache enabled
   1 #9 lshift FLASH_ACR bit@ ;
: icache-ena  ( -- )                     \ enable instruction cache
   1 #9 lshift FLASH_ACR bis! ;
: icache-dis  ( -- )                     \ disable instruction cache
   1 #9 lshift FLASH_ACR bic! ;
: icache-reset ( -- )                    \ reset instruction cache
   icache-ena? dcache-dis
   1 #11 lshift FLASH_ACR bis!
   1 #11 lshift FLASH_ACR bic!
   if icache-ena then ;
: prefetch-ena ( -- )                    \ enable prefetch
   1 #8 lshift FLASH_ACR bis! ;
: prefetch-dis ( -- )                    \ disable prefetch
   1 #8 lshift FLASH_ACR bic! ;
: flash-latency! ( l -- )                \ set flash latency
   $f FLASH_ACR bits! ;
: cache-init  ( -- )
   icache-reset icache-ena
   dcache-reset dcache-ena ;

$40004408 constant USART2_BRR


\ f (VCO clock) = f (PLL clock input) * (PLLN/PLLM)
\ f (PLL general clock output) = F (VCO clock) / PLLP
\ f (USB, RNG und andere) = f (VCO clock) / PLLQ

\ RCC register definitions

$40023800      constant RCC_Base

RCC_Base $00 +  constant RCC_CR
    1           constant HSION
    1  1 lshift constant HSIRDY
  $1F  3 lshift constant HSITRIM
  $FF  8 lshift constant HSICAL
    1 16 lshift constant HSEON
    1 17 lshift constant HSERDY
    1 18 lshift constant HSEBYP
    1 19 lshift constant CSSON
    1 24 lshift constant PLLON
    1 25 lshift constant PLLRDY
    1 26 lshift constant PLLI2SON
    1 27 lshift constant PLLI2SRDY


RCC_Base $04 +    constant RCC_PLLCFGR
   $03F           constant PLLM    \ pll input predivider after pll source mux 1..2MHz
   $1FF  6 lshift constant PLLN    \ pll multiplier after PLLM 100...432MHz
      3 16 lshift constant PLLP    \ divider after PLLN - 0: /2 1: /4 2: /6 3: /8 <100MHz
      1 16 lshift constant PLLP0
      1 17 lshift constant PLLP1
      1 22 lshift constant PLLSRC  \ PLLCLK source for PLL and PLLI2S 0-HSI 1-HSE
     $F 24 lshift constant PLLQ    \ pll divider for USB otg(48MHz), SDIO(<=48MHz), RNG(<=48MHZ) after PLLN
      1 24 lshift constant PLLQ0   \ pll divider for USB otg(48MHz), SDIO(<=48MHz), RNG(<=48MHZ) after PLLN
      1 25 lshift constant PLLQ1   \ valid values 2..15
      1 26 lshift constant PLLQ2
      1 27 lshift constant PLLQ3


RCC_Base $08 + constant RCC_CFGR
      3 30 lshift constant MC02    \ Microcontroller clock output 2 - 00: SYSCLK 01: PLLI2S 10: HSE 11: PLL
      7 27 lshift constant MCO2PRE \ MCO2 prescaler - 0xx: /1 100: /2 101: /3 110: /4 111: /5
      7 24 lshift constant MCO1PRE \ MCO1 prescaler - 0xx: /1 100: /2 101: /3 110: /4 111: /5
      1 23 lshift constant I2SSRC  \ I2S clock selection - 0: PLLI2S 1: External clock on the I2S_CKIN pin
      3 21 lshift constant MCO1    \ Microcontroller clock output 1 - 00: HSI 01: LSE 10: HSE 11: PLL
     31 16 lshift constant RTCPRE  \ HSE division factor for RTC clock 0,1: no clock, 2..31: /2../31
      7 13 lshift constant PPRE2   \ APB high-speed prescaler (APB2) 0xx: /1, 100: /2, 101: /4, 110: /8, 111: /16 <= 84Mhz
      7 10 lshift constant PPRE1   \ APB Low speed prescaler (APB1) 0xx: /1, 100: /2, 101: /4, 110: /8, 111: /16 <= 42Mhz
      3  8 lshift constant RCC_CFGR_RES \ reserved
     15  4 lshift constant HPRE    \ AHB prescaler 0-7:/1 8:/2 9:/4 10:/8 11:/16 12:/64 13:/128 14:/256 15:/512 (>=25 for Ethernet)
      3  2 lshift constant SWS     \ System clock switch status 0:HSI 1:HSE 2:PLL 3:not applicable
      3           constant SW      \ System clock switch	  0:HSI 1:HSE 2:PLL 3:not allowed


: HSE_BYPASS  ( -- )  \ external clock source
  HSEBYP HSEON RCC_CR BIS! ;

: HSE_XTAL ( -- )     \ xtal
  RCC_CR @ HSEBYP not and HSEON or RCC_CR ! ;

: pll-off

: hse-on! ( -- ) HSEON RCC_CR bis! ;     \ turn on hse
: hse-on? ( -- f ) HSERDY RCC_CR bit@ ;  \ is hse on ?
: wait-hse ( n -- f )                    \ wait until hse is ready
   0 do hse-on? until loop ;             \ this might block forever
: sys-clk-hse  ( -- )
   

: sys-clk  ( mhz -- )                    \ set system clock to MHZ
   hse-on? if sys-clk-hse 
   else sys-clk-hsi then ;
: clk-100-hse ( -- )                     \ set system clock to 100 MHz hse
   hse-on! sys-clk-hse
   3 flash-latency!                      \ 2V7 .. 3V6 100 MHz
   prefetch-ena cache-init
   pll-off pll-src-hse
   HSE_CLK 2000000 / PLLM!               \ 2 MHz PLL input clock
   200 PLLN! 0 PLLP!                     \ 200 MHz PLL clock 100 Mhz PLLP clock
   pll-on
   0 HPRE! 0 PPRE2! %100 PPRE1!          \ AHB-100MHz APB2-100MHz APB1-50MHz
   sys-clk-pll ;